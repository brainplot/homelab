- name: Create Kubernetes PKI directories
  become: true
  ansible.builtin.file:
    path: /etc/kubernetes/pki/etcd
    recurse: true
    state: directory

- become: true
  vars:
    certificate_authorities:
      - { cn: kubernetes-ca, crt: ca.crt, key: ca.key }
      - { cn: etcd-ca, crt: etcd/ca.crt, key: etcd/ca.key }
      - { cn: kubernetes-front-proxy-ca, crt: front-proxy-ca.crt, key: front-proxy-ca.key }
  block:
    - name: Create private key
      community.crypto.openssl_privatekey:
        path: /etc/kubernetes/pki/{{ item.key }}
        type: ECC
        curve: secp256r1
        format_mismatch: convert
        state: present
      with_items: '{{ certificate_authorities }}'
      when: inventory_hostname == ansible_play_hosts_all[0]

    - name: Create certificate signing request (CSR) for CA certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: /etc/kubernetes/pki/{{ item.key }}
        common_name: '{{ item.cn }}'
        use_common_name_for_san: false
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: true
        key_usage:
          - keyCertSign
        key_usage_critical: true
      with_items: '{{ certificate_authorities }}'
      when: inventory_hostname == ansible_play_hosts_all[0]
      register: ca_csr

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate:
        path: /etc/kubernetes/pki/{{ item.item.crt }}
        privatekey_path: /etc/kubernetes/pki/{{ item.item.key }}
        csr_content: '{{ item.csr }}'
        provider: selfsigned
        state: present
      with_items: '{{ ca_csr.results }}'
      when: inventory_hostname == ansible_play_hosts_all[0]

- name: Get information on Kubernetes CA
  become: true
  community.crypto.x509_certificate_info:
    path: /etc/kubernetes/pki/ca.crt
  register: kubernetes_ca

- vars:
    kubeadm_discovery_token_ca_cert_hash: 'sha256:{{ kubernetes_ca.public_key_fingerprints.sha256 | replace(":", "") }}'
  become: true
  block:
    - name: Init first control plane node
      ansible.builtin.command:
        cmd: kubeadm init --upload-certs --config /dev/stdin
        creates: /etc/kubernetes/kubelet.conf
        stdin: '{{ lookup("template", "kubeadm.yaml.j2") }}'
      when: inventory_hostname == ansible_play_hosts_all[0]

    - name: Join control plane
      ansible.builtin.command:
        cmd: kubeadm join --config /dev/stdin
        creates: /etc/kubernetes/kubelet.conf
        stdin: '{{ lookup("template", "kubeadm.yaml.j2") }}'
      register: join_control_plane
      when: inventory_hostname != ansible_play_hosts_all[0]
      retries: 3
      delay: 3
      until: join_control_plane is not failed
