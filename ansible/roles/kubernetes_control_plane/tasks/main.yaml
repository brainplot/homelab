- name: Create /var/log/kubernetes directory
  become: true
  ansible.builtin.file:
    path: /var/log/kubernetes
    state: directory
  register: kubernetes_log

- name: Create {{ kubernetes_log.path }}/audit.log file
  become: true
  ansible.builtin.file:
    path: '{{ kubernetes_log.path }}/audit.log'
    mode: '0600'
    state: touch
  register: kubernetes_log

- name: Create /etc/kubernetes directory
  become: true
  ansible.builtin.file:
    path: /etc/kubernetes
    state: directory

- name: Copy audit-policy.yaml
  become: true
  ansible.builtin.copy:
    dest: /etc/kubernetes/audit-policy.yaml
    src: audit-policy.yaml
    mode: '0644'

- name: Render encryption configuration
  become: true
  ansible.builtin.template:
    dest: /etc/kubernetes/encryption-configuration.yaml
    src: enc.yaml.j2
    mode: '0600'
    force: true

- name: Init first control plane node
  become: true
  ansible.builtin.command:
    cmd: kubeadm init --upload-certs --config /dev/stdin
    creates: /etc/kubernetes/kubelet.conf
    stdin: '{{ lookup("template", "kubeadm_init.yaml.j2") }}'
  when: inventory_hostname == ansible_play_hosts_all[0]
  vars:
    kubernetes_log_file: '{{ kubernetes_log.dest }}'

- name: Get information on Kubernetes CA
  become: true
  community.crypto.x509_certificate_info:
    path: /etc/kubernetes/pki/ca.crt
  register: kubernetes_ca

- name: Join control plane
  become: true
  ansible.builtin.command:
    cmd: kubeadm join --config /dev/stdin
    creates: /etc/kubernetes/kubelet.conf
    stdin: '{{ lookup("template", "kubeadm_join.yaml.j2") }}'
  register: join_control_plane
  when: inventory_hostname != ansible_play_hosts_all[0]
  retries: 3
  delay: 3
  until: join_control_plane is not failed
  vars:
    kubeadm_discovery_token_ca_cert_hash: 'sha256:{{ kubernetes_ca.public_key_fingerprints.sha256 | replace(":", "") }}'

- name: Scale coredns deployment
  become: true
  kubernetes.core.k8s_scale:
    api_version: apps/v1
    kind: Deployment
    name: coredns
    namespace: kube-system
    replicas: '{{ coredns_replicas | default(replicas) }}'
    kubeconfig: /etc/kubernetes/admin.conf
  register: scale_coredns
  retries: 3
  delay: 3
  until: scale_coredns is not failed
